#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Mar 13, 2024 12:03:39 PM GMT  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *

import PyMouseMacro

_debug = True # False to eliminate debug printing from callback functions.

def main(*args):
    '''Main entry point for the application.'''
    global root
    root = tk.Tk()
    root.protocol( 'WM_DELETE_WINDOW' , root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = PyMouseMacro.PyMouseMacro(_top1)
    # Creates a toplevel widget.
    global _top2, _w2
    _top2 = tk.Toplevel(root)
    _w2 = PyMouseMacro.MacroMerge(_top2)
    root.mainloop()

def btn_cmd_clear(*args):
    if _debug:
        print('PyMouseMacro_support.btn_cmd_clear')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def btn_cmd_folder(*args):
    if _debug:
        print('PyMouseMacro_support.btn_cmd_folder')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def btn_cmd_hotkey_add(*args):
    if _debug:
        print('PyMouseMacro_support.btn_cmd_hotkey_add')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def btn_cmd_hotkey_del(*args):
    if _debug:
        print('PyMouseMacro_support.btn_cmd_hotkey_del')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def btn_cmd_key_intv(*args):
    if _debug:
        print('PyMouseMacro_support.btn_cmd_key_intv')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def btn_cmd_macro_add(*args):
    if _debug:
        print('PyMouseMacro_support.btn_cmd_macro_add')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def btn_cmd_macro_del(*args):
    if _debug:
        print('PyMouseMacro_support.btn_cmd_macro_del')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def btn_cmd_mouse_intv(*args):
    if _debug:
        print('PyMouseMacro_support.btn_cmd_mouse_intv')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def btn_cmd_mouse_offset(*args):
    if _debug:
        print('PyMouseMacro_support.btn_cmd_mouse_offset')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def btn_cmd_move_mouse(*args):
    if _debug:
        print('PyMouseMacro_support.btn_cmd_move_mouse')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def btn_cmd_play(*args):
    if _debug:
        print('PyMouseMacro_support.btn_cmd_play')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def btn_cmd_record(*args):
    if _debug:
        print('PyMouseMacro_support.btn_cmd_record')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def btn_cmd_refresh(*args):
    if _debug:
        print('PyMouseMacro_support.btn_cmd_refresh')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def btn_cmd_rel_delay(*args):
    if _debug:
        print('PyMouseMacro_support.btn_cmd_rel_delay')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def btn_cmd_repeat(*args):
    if _debug:
        print('PyMouseMacro_support.btn_cmd_repeat')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def btn_cmd_restore(*args):
    if _debug:
        print('PyMouseMacro_support.btn_cmd_restore')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def btn_cmd_save(*args):
    if _debug:
        print('PyMouseMacro_support.btn_cmd_save')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def btn_mm_cmd_add(*args):
    if _debug:
        print('PyMouseMacro_support.btn_mm_cmd_add')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def btn_mm_cmd_add_delay(*args):
    if _debug:
        print('PyMouseMacro_support.btn_mm_cmd_add_delay')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def btn_mm_cmd_cancel(*args):
    if _debug:
        print('PyMouseMacro_support.btn_mm_cmd_cancel')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def btn_mm_cmd_clear(*args):
    if _debug:
        print('PyMouseMacro_support.btn_mm_cmd_clear')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def btn_mm_cmd_ok(*args):
    if _debug:
        print('PyMouseMacro_support.btn_mm_cmd_ok')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def btn_mm_cmd_remove(*args):
    if _debug:
        print('PyMouseMacro_support.btn_mm_cmd_remove')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def menu_about(*args):
    if _debug:
        print('PyMouseMacro_support.menu_about')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def menu_check_updates(*args):
    if _debug:
        print('PyMouseMacro_support.menu_check_updates')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def menu_copy_evts(*args):
    if _debug:
        print('PyMouseMacro_support.menu_copy_evts')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def menu_merge(*args):
    if _debug:
        print('PyMouseMacro_support.menu_merge')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def menu_min_play(*args):
    if _debug:
        print('PyMouseMacro_support.menu_min_play')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def menu_min_record(*args):
    if _debug:
        print('PyMouseMacro_support.menu_min_record')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def menu_paste_evts(*args):
    if _debug:
        print('PyMouseMacro_support.menu_paste_evts')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def validate_number(*args):
    if _debug:
        print('PyMouseMacro_support.validate_number')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
        return True

def validate_numeric(*args):
    if _debug:
        print('PyMouseMacro_support.validate_numeric')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
        return True

if __name__ == '__main__':
    PyMouseMacro.start_up()




