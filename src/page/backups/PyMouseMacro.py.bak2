#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Mar 07, 2024 12:17:20 AM GMT  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_location = os.path.dirname(__file__)

import PyMouseMacro_support

_bgcolor = '#d9d9d9'
_fgcolor = '#000000'
_tabfg1 = 'black' 
_tabfg2 = 'white' 
_bgmode = 'light' 
_tabbg1 = '#d9d9d9' 
_tabbg2 = 'gray40' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran: return        
    try: PyMouseMacro_support.root.tk.call('source',
                os.path.join(_location, 'themes', 'default.tcl'))
    except: pass
    style = ttk.Style()
    style.theme_use('default')
    style.configure('.', font = "TkDefaultFont")
    if sys.platform == "win32":
       style.theme_use('winnative')    
    _style_code_ran = 1

class PyMouseMacros:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("1083x711+338+168")
        top.minsize(1, 1)
        top.maxsize(1905, 1042)
        top.resizable(1,  1)
        top.title("Mouse Macros")

        self.top = top

        self.menubar = tk.Menu(top, font="-family {DejaVu Sans} -size 12"
                ,bg=_bgcolor, fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.sub_menu = tk.Menu(self.menubar, activebackground='#d9d9d9'
                ,activeforeground='black', font="-family {DejaVu Sans} -size 10"
                ,tearoff=0)
        self.menubar.add_cascade(compound='left'
                ,font="-family {DejaVu Sans} -size 12", label='Macro'
                ,menu=self.sub_menu, )
        self.sub_menu.add_command(compound='left'
                ,font="-family {DejaVu Sans} -size 12", label='Import Macro')
        self.sub_menu.add_command(compound='left'
                ,font="-family {DejaVu Sans} -size 12", label='Export Macro')
        self.sub_menu1 = tk.Menu(self.menubar, activebackground='#d9d9d9'
                ,activeforeground='black', font="-family {DejaVu Sans} -size 10"
                ,tearoff=0)
        self.menubar.add_cascade(compound='left'
                ,font="-family {DejaVu Sans} -size 12", label='Settings'
                ,menu=self.sub_menu1, )
        self.sub_menu1.add_command(compound='left'
                ,font="-family {DejaVu Sans} -size 12", label='Edit Settings')
        self.sub_menu12 = tk.Menu(self.menubar, activebackground='#d9d9d9'
                ,activeforeground='black', font="-family {DejaVu Sans} -size 10"
                ,tearoff=0)
        self.menubar.add_cascade(compound='left'
                ,font="-family {DejaVu Sans} -size 12", label='Help'
                ,menu=self.sub_menu12, )
        self.sub_menu12.add_command(compound='left'
                ,font="-family {DejaVu Sans} -size 12", label='About')

        _style_code()
        self.SLBoxMacroList = ScrolledListBox(self.top)
        self.SLBoxMacroList.place(relx=0.009, rely=0.098, relheight=0.834
                , relwidth=0.247)
        self.SLBoxMacroList.configure(activestyle="none")
        self.SLBoxMacroList.configure(background="white")
        self.SLBoxMacroList.configure(cursor="xterm")
        self.SLBoxMacroList.configure(font="TkFixedFont")
        self.SLBoxMacroList.configure(highlightbackground="#c2d8d8")
        self.SLBoxMacroList.configure(highlightcolor="#070707")
        self.SLBoxMacroList.configure(selectbackground="#cbd5d8")
        self.SLBoxMacroList.configure(selectmode='single')

        self.LFrameEvents = tk.LabelFrame(self.top)
        self.LFrameEvents.place(relx=0.259, rely=0.246, relheight=0.682
                , relwidth=0.727)
        self.LFrameEvents.configure(relief='groove')
        self.LFrameEvents.configure(font="-family {DejaVu Sans} -size 10")
        self.LFrameEvents.configure(text='''Macro Events''')

        self.SWinEvents = ScrolledWindow(self.LFrameEvents)
        self.SWinEvents.place(relx=0.013, rely=0.041, relheight=0.955
                , relwidth=0.981, bordermode='ignore')
        self.SWinEvents.configure(background="#d3d3d3")
        self.SWinEvents.configure(borderwidth="2")
        self.SWinEvents.configure(relief="groove")
        self.SWinEvents.configure(selectbackground="#d9d9d9")
        self.color = self.SWinEvents.cget("background")
        self.SWinEvents_f = tk.Frame(self.SWinEvents,
                            background=self.color)
        self.SWinEvents.create_window(0, 0, anchor='nw',
                                           window=self.SWinEvents_f)

        self.LFrameMacroSettings = tk.LabelFrame(self.top)
        self.LFrameMacroSettings.place(relx=0.259, rely=0.091, relheight=0.145
                , relwidth=0.729)
        self.LFrameMacroSettings.configure(relief='groove')
        self.LFrameMacroSettings.configure(font="-family {DejaVu Sans} -size 10")
        self.LFrameMacroSettings.configure(text='''Macro Settings''')

        self.LbHotKeyText = tk.Label(self.LFrameMacroSettings)
        self.LbHotKeyText.place(relx=0.766, rely=0.252, height=23, width=101
                , bordermode='ignore')
        self.LbHotKeyText.configure(activebackground="#d9d9d9")
        self.LbHotKeyText.configure(activeforeground="#3f3f3f")
        self.LbHotKeyText.configure(anchor='w')
        self.LbHotKeyText.configure(compound='left')
        self.LbHotKeyText.configure(font="-family {DejaVu Sans} -size 10")
        self.LbHotKeyText.configure(relief="sunken")

        self.LbHotKey = tk.Label(self.LFrameMacroSettings)
        self.LbHotKey.place(relx=0.689, rely=0.252, height=28, width=59
                , bordermode='ignore')
        self.LbHotKey.configure(activebackground="#d9d9d9")
        self.LbHotKey.configure(anchor='w')
        self.LbHotKey.configure(compound='left')
        self.LbHotKey.configure(font="-family {DejaVu Sans} -size 10")
        self.LbHotKey.configure(text='''Hotkey:''')

        self.EntryRelDelay = tk.Entry(self.LFrameMacroSettings)
        self.EntryRelDelay.place(relx=0.837, rely=0.631, height=23
                , relwidth=0.109, bordermode='ignore')
        self.EntryRelDelay.configure(background="white")
        self.EntryRelDelay.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.EntryRelDelay.configure(selectbackground="#d9d9d9")
        self.EntryRelDelay.configure(validate="key")
        validate_number = self.EntryRelDelay.register(PyMouseMacro_support.validate_number)
        self.EntryRelDelay.configure(validatecommand=(validate_number))

        self.BtnPostRelIntv = tk.Button(self.LFrameMacroSettings)
        self.BtnPostRelIntv.place(relx=0.684, rely=0.583, height=31, width=111
                , bordermode='ignore')
        self.BtnPostRelIntv.configure(activebackground="#d9d9d9")
        self.BtnPostRelIntv.configure(command=PyMouseMacro_support.BtCmdRelDelay)
        self.BtnPostRelIntv.configure(font="-family {DejaVu Sans} -size 10")
        self.BtnPostRelIntv.configure(justify='left')
        self.BtnPostRelIntv.configure(text='''Release Delay:''')

        self.BtnHotKeyAdd = tk.Button(self.LFrameMacroSettings)
        self.BtnHotKeyAdd.place(relx=0.891, rely=0.252, height=21, width=31
                , bordermode='ignore')
        self.BtnHotKeyAdd.configure(activebackground="#d9d9d9")
        self.BtnHotKeyAdd.configure(command=PyMouseMacro_support.BtCmdHotkeyAdd)
        self.BtnHotKeyAdd.configure(font="-family {DejaVu Sans} -size 14")
        self.BtnHotKeyAdd.configure(text='''+''')

        self.BtnHotKeyDel = tk.Button(self.LFrameMacroSettings)
        self.BtnHotKeyDel.place(relx=0.928, rely=0.252, height=21, width=31
                , bordermode='ignore')
        self.BtnHotKeyDel.configure(activebackground="#d9d9d9")
        self.BtnHotKeyDel.configure(command=PyMouseMacro_support.BtCmdHotkeyDel)
        self.BtnHotKeyDel.configure(font="-family {DejaVu Sans} -size 14 -weight bold")
        self.BtnHotKeyDel.configure(foreground="#ff0000")
        self.BtnHotKeyDel.configure(text='''-''')

        self.BtnOffset = tk.Button(self.LFrameMacroSettings)
        self.BtnOffset.place(relx=0.013, rely=0.194, height=31, width=111
                , bordermode='ignore')
        self.BtnOffset.configure(activebackground="#d9d9d9")
        self.BtnOffset.configure(command=PyMouseMacro_support.BtCmdMouseOffset)
        self.BtnOffset.configure(font="-family {DejaVu Sans} -size 10")
        self.BtnOffset.configure(text='''Mouse Offset:''')

        self.EntryMPressIntv = tk.Entry(self.LFrameMacroSettings)
        self.EntryMPressIntv.place(relx=0.583, rely=0.631, height=23
                , relwidth=0.071, bordermode='ignore')
        self.EntryMPressIntv.configure(background="white")
        self.EntryMPressIntv.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.EntryMPressIntv.configure(selectbackground="#d9d9d9")
        self.EntryMPressIntv.configure(validate="key")
        validate_number = self.EntryMPressIntv.register(PyMouseMacro_support.validate_number)
        self.EntryMPressIntv.configure(validatecommand=(validate_number))

        self.EntryKPressIntv = tk.Entry(self.LFrameMacroSettings)
        self.EntryKPressIntv.place(relx=0.583, rely=0.243, height=23
                , relwidth=0.071, bordermode='ignore')
        self.EntryKPressIntv.configure(background="white")
        self.EntryKPressIntv.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.EntryKPressIntv.configure(selectbackground="#d9d9d9")
        self.EntryKPressIntv.configure(validate="key")
        validate_number = self.EntryKPressIntv.register(PyMouseMacro_support.validate_number)
        self.EntryKPressIntv.configure(validatecommand=(validate_number, '%P'))

        self.BtnRepeat = tk.Button(self.LFrameMacroSettings)
        self.BtnRepeat.place(relx=0.165, rely=0.583, height=31, width=71
                , bordermode='ignore')
        self.BtnRepeat.configure(activebackground="#d9d9d9")
        self.BtnRepeat.configure(command=PyMouseMacro_support.BtCmdRepeat)
        self.BtnRepeat.configure(font="-family {DejaVu Sans} -size 10")
        self.BtnRepeat.configure(text='''Repeat''')

        self.LabelOffset = tk.Label(self.LFrameMacroSettings)
        self.LabelOffset.place(relx=0.025, rely=0.583, height=26, width=92
                , bordermode='ignore')
        self.LabelOffset.configure(activebackground="#d9d9d9")
        self.LabelOffset.configure(anchor='w')
        self.LabelOffset.configure(compound='left')
        self.LabelOffset.configure(font="-family {DejaVu Sans} -size 10")
        self.LabelOffset.configure(relief="ridge")
        self.LabelOffset.configure(text='''0,0''')

        self.EntryRepeat = tk.Entry(self.LFrameMacroSettings)
        self.EntryRepeat.place(relx=0.266, rely=0.631, height=23, relwidth=0.058
                , bordermode='ignore')
        self.EntryRepeat.configure(background="white")
        self.EntryRepeat.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.EntryRepeat.configure(selectbackground="#d9d9d9")
        self.EntryRepeat.configure(validate="key")
        validate_number = self.EntryRepeat.register(PyMouseMacro_support.validate_number)
        self.EntryRepeat.configure(validatecommand=(validate_number))

        self.BtnMoveMouse = tk.Button(self.LFrameMacroSettings)
        self.BtnMoveMouse.place(relx=0.165, rely=0.194, height=31, width=111
                , bordermode='ignore')
        self.BtnMoveMouse.configure(activebackground="#d9d9d9")
        self.BtnMoveMouse.configure(command=PyMouseMacro_support.BtCmdMoveMouse)
        self.BtnMoveMouse.configure(font="-family {DejaVu Sans} -size 10")
        self.BtnMoveMouse.configure(text='''Move Mouse''')

        self.BtnMPressIntv = tk.Button(self.LFrameMacroSettings)
        self.BtnMPressIntv.place(relx=0.368, rely=0.583, height=31, width=161
                , bordermode='ignore')
        self.BtnMPressIntv.configure(activebackground="#d9d9d9")
        self.BtnMPressIntv.configure(command=PyMouseMacro_support.BtCmdMouseIntv)
        self.BtnMPressIntv.configure(font="-family {DejaVu Sans} -size 10")
        self.BtnMPressIntv.configure(relief="sunken")
        self.BtnMPressIntv.configure(text='''Mouse Press Interval:''')

        self.BtnKPressIntv = tk.Button(self.LFrameMacroSettings)
        self.BtnKPressIntv.place(relx=0.368, rely=0.194, height=31, width=161
                , bordermode='ignore')
        self.BtnKPressIntv.configure(activebackground="#d9d9d9")
        self.BtnKPressIntv.configure(command=PyMouseMacro_support.BtCmdKeyIntv)
        self.BtnKPressIntv.configure(font="-family {DejaVu Sans} -size 10")
        self.BtnKPressIntv.configure(relief="sunken")
        self.BtnKPressIntv.configure(text='''Key Press Interval:''')

        self.LbStatusBar = tk.Label(self.top)
        self.LbStatusBar.place(relx=0.009, rely=0.94, height=25, width=1060)
        self.LbStatusBar.configure(activebackground="#d9d9d9")
        self.LbStatusBar.configure(anchor='w')
        self.LbStatusBar.configure(compound='left')
        self.LbStatusBar.configure(font="-family {DejaVu Sans} -size 10")
        self.LbStatusBar.configure(justify='left')
        self.LbStatusBar.configure(relief="sunken")

        self.FrameMacroListButtons = tk.Frame(self.top)
        self.FrameMacroListButtons.place(relx=0.009, rely=0.014, relheight=0.069
                , relwidth=0.239)
        self.FrameMacroListButtons.configure(relief='groove')
        self.FrameMacroListButtons.configure(borderwidth="2")
        self.FrameMacroListButtons.configure(relief="groove")

        self.BtnAddMacro = tk.Button(self.FrameMacroListButtons)
        self.BtnAddMacro.place(relx=0.039, rely=0.204, height=31, width=31)
        self.BtnAddMacro.configure(activebackground="#d9d9d9")
        self.BtnAddMacro.configure(command=PyMouseMacro_support.BtCmdMacroAdd)
        self.BtnAddMacro.configure(font="-family {DejaVu Sans} -size 16")
        self.BtnAddMacro.configure(text='''+''')

        self.BtnDelMacro = tk.Button(self.FrameMacroListButtons)
        self.BtnDelMacro.place(relx=0.197, rely=0.204, height=31, width=31)
        self.BtnDelMacro.configure(activebackground="#d9d9d9")
        self.BtnDelMacro.configure(command=PyMouseMacro_support.BtCmdMacroDel)
        self.BtnDelMacro.configure(font="-family {DejaVu Sans} -size 16 -weight bold")
        self.BtnDelMacro.configure(foreground="#f20f0f")
        self.BtnDelMacro.configure(text='''-''')

        self.BtnRefresh = tk.Button(self.FrameMacroListButtons)
        self.BtnRefresh.place(relx=0.656, rely=0.204, height=31, width=71)
        self.BtnRefresh.configure(activebackground="#d9d9d9")
        self.BtnRefresh.configure(command=PyMouseMacro_support.BtnCmdRefresh)
        self.BtnRefresh.configure(font="-family {DejaVu Sans} -size 10")
        self.BtnRefresh.configure(text='''Refresh''')

        self.BtnFolder = tk.Button(self.FrameMacroListButtons)
        self.BtnFolder.place(relx=0.347, rely=0.204, height=31, width=71)
        self.BtnFolder.configure(activebackground="#d9d9d9")
        self.BtnFolder.configure(command=PyMouseMacro_support.BtnCmdFolder)
        self.BtnFolder.configure(font="-family {DejaVu Sans} -size 10")
        self.BtnFolder.configure(text='''Folder''')

        self.FrameMacroEvtButtons = tk.Frame(self.top)
        self.FrameMacroEvtButtons.place(relx=0.259, rely=0.014, relheight=0.069
                , relwidth=0.728)
        self.FrameMacroEvtButtons.configure(relief='groove')
        self.FrameMacroEvtButtons.configure(borderwidth="2")
        self.FrameMacroEvtButtons.configure(relief="groove")

        self.BtnRestore = tk.Button(self.FrameMacroEvtButtons)
        self.BtnRestore.place(relx=0.888, rely=0.204, height=31, width=71)
        self.BtnRestore.configure(activebackground="#d9d9d9")
        self.BtnRestore.configure(command=PyMouseMacro_support.BtCmdRestore)
        self.BtnRestore.configure(font="-family {DejaVu Sans} -size 10")
        self.BtnRestore.configure(text='''Restore''')

        self.BtnPlay = tk.Button(self.FrameMacroEvtButtons)
        self.BtnPlay.place(relx=0.317, rely=0.204, height=31, width=56)
        self.BtnPlay.configure(activebackground="#d9d9d9")
        self.BtnPlay.configure(command=PyMouseMacro_support.BtCmdPlay)
        self.BtnPlay.configure(font="-family {DejaVu Sans} -size 10")
        self.BtnPlay.configure(text='''Play''')

        self.BtnSave = tk.Button(self.FrameMacroEvtButtons)
        self.BtnSave.place(relx=0.114, rely=0.204, height=31, width=71)
        self.BtnSave.configure(activebackground="#d9d9d9")
        self.BtnSave.configure(command=PyMouseMacro_support.BtCmdSave)
        self.BtnSave.configure(font="-family {DejaVu Sans} -size 10")
        self.BtnSave.configure(text='''Save''')

        self.BtnClear = tk.Button(self.FrameMacroEvtButtons)
        self.BtnClear.place(relx=0.787, rely=0.204, height=31, width=71)
        self.BtnClear.configure(activebackground="#d9d9d9")
        self.BtnClear.configure(command=PyMouseMacro_support.BtCmdClear)
        self.BtnClear.configure(font="-family {DejaVu Sans} -size 10")
        self.BtnClear.configure(text='''Clear''')

        self.BtnRecord = tk.Button(self.FrameMacroEvtButtons)
        self.BtnRecord.place(relx=0.013, rely=0.204, height=31, width=71)
        self.BtnRecord.configure(activebackground="#d9d9d9")
        self.BtnRecord.configure(command=PyMouseMacro_support.BtCmdRecord)
        self.BtnRecord.configure(font="-family {DejaVu Sans} -size 10")
        self.BtnRecord.configure(text='''Record''')

class TLDialog:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("501x182+691+335")
        top.minsize(1, 1)
        top.maxsize(1905, 1042)
        top.resizable(1,  1)
        top.title("Dialog")
        top.configure(borderwidth="5")
        top.configure(takefocus="1")

        self.top = top

        self.LbDialogText = tk.Label(self.top)
        self.LbDialogText.place(relx=0.04, rely=0.06, height=100, width=459)
        self.LbDialogText.configure(activebackground="#d9d9d9")
        self.LbDialogText.configure(anchor='w')
        self.LbDialogText.configure(compound='center')
        self.LbDialogText.configure(font="-family {DejaVu Sans} -size 16")
        self.LbDialogText.configure(text='''Dialog Text''')

        self.BtnDialogOK = tk.Button(self.top)
        self.BtnDialogOK.place(relx=0.818, rely=0.714, height=31, width=71)
        self.BtnDialogOK.configure(activebackground="#d9d9d9")
        self.BtnDialogOK.configure(font="-family {DejaVu Sans} -size 10")
        self.BtnDialogOK.configure(text='''OK''')

        self.BtnDialogCancel = tk.Button(self.top)
        self.BtnDialogCancel.place(relx=0.659, rely=0.714, height=31, width=71)
        self.BtnDialogCancel.configure(activebackground="#d9d9d9")
        self.BtnDialogCancel.configure(font="-family {DejaVu Sans} -size 10")
        self.BtnDialogCancel.configure(text='''Cancel''')

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

class ScrolledWindow(AutoScroll, tk.Canvas):
    '''A standard Tkinter Canvas widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Canvas.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    PyMouseMacro_support.main()

if __name__ == '__main__':
    PyMouseMacro_support.main()




