#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Mar 20, 2024 06:43:29 PM GMT  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_location = os.path.dirname(__file__)

import PyMouseMacro_support

_bgcolor = '#d9d9d9'
_fgcolor = '#000000'
_tabfg1 = 'black' 
_tabfg2 = 'white' 
_bgmode = 'light' 
_tabbg1 = '#d9d9d9' 
_tabbg2 = 'gray40' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran: return        
    try: PyMouseMacro_support.root.tk.call('source',
                os.path.join(_location, 'themes', 'default.tcl'))
    except: pass
    style = ttk.Style()
    style.theme_use('default')
    style.configure('.', font = "TkDefaultFont")
    if sys.platform == "win32":
       style.theme_use('winnative')    
    _style_code_ran = 1

class PyMouseMacro:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("1083x711+343+184")
        top.minsize(1, 1)
        top.maxsize(1905, 1042)
        top.resizable(1,  1)
        top.title("Mouse Macros")

        self.top = top
        self.checks_1 = tk.StringVar()
        self.checks_2 = tk.StringVar()
        self.checks_3 = tk.StringVar()

        self.menubar = tk.Menu(top, font="-family {DejaVu Sans} -size 12"
                ,bg=_bgcolor, fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.sub_menu = tk.Menu(self.menubar, activebackground='#d9d9d9'
                ,activeforeground='black', font="-family {DejaVu Sans} -size 10"
                ,tearoff=0)
        self.menubar.add_cascade(compound='left'
                ,font="-family {DejaVu Sans} -size 12", label='Macro'
                ,menu=self.sub_menu, )
        self.sub_menu.add_command(command=PyMouseMacro_support.menu_merge
                ,compound='left', font="-family {DejaVu Sans} -size 12"
                ,label='Merge ...')
        self.sub_menu1 = tk.Menu(self.menubar, activebackground='#d9d9d9'
                ,activeforeground='black', font="-family {DejaVu Sans} -size 10"
                ,tearoff=0)
        self.menubar.add_cascade(compound='left'
                ,font="-family {DejaVu Sans} -size 12", label='Edit'
                ,menu=self.sub_menu1, )
        self.sub_menu1.add_command(command=PyMouseMacro_support.menu_copy_evts
                ,compound='left', font="-family {DejaVu Sans} -size 12"
                ,label='Copy Events')
        self.sub_menu1.add_command(command=PyMouseMacro_support.menu_paste_evts
                ,compound='left', font="-family {DejaVu Sans} -size 12"
                ,label='Paste Events')
        self.sub_menu12 = tk.Menu(self.menubar, activebackground='#d9d9d9'
                ,activeforeground='black', font="-family {DejaVu Sans} -size 10"
                ,tearoff=0)
        self.menubar.add_cascade(compound='left'
                ,font="-family {DejaVu Sans} -size 12", label='Settings'
                ,menu=self.sub_menu12, )
        self.sub_menu12.add_checkbutton(variable=self.checks_1
                ,command=PyMouseMacro_support.menu_min_record, compound='left'
                ,font="-family {DejaVu Sans} -size 12", label='Minimize on Record'
)
        self.sub_menu12.add_checkbutton(variable=self.checks_2
                ,command=PyMouseMacro_support.menu_min_play, compound='left'
                ,font="-family {DejaVu Sans} -size 12", label='Minimize on Play')
        self.sub_menu12.add_checkbutton(variable=self.checks_3
                ,command=PyMouseMacro_support.menu_check_updates, compound='left'
                ,font="-family {DejaVu Sans} -size 12", label='Check for Updates'
)
        self.sub_menu12.add_checkbutton(variable=self.checks_1
                ,command=PyMouseMacro_support.menu_autosave, compound='left'
                ,font="-family {DejaVu Sans} -size 12", label='Auto-save')
        self.sub_menu123 = tk.Menu(self.menubar, activebackground='#d9d9d9'
                ,activeforeground='black', font="-family {DejaVu Sans} -size 10"
                ,tearoff=0)
        self.menubar.add_cascade(compound='left'
                ,font="-family {DejaVu Sans} -size 12", label='Help'
                ,menu=self.sub_menu123, )
        self.sub_menu123.add_command(command=PyMouseMacro_support.menu_about
                ,compound='left', font="-family {DejaVu Sans} -size 12"
                ,label='About')

        self.lframe_macro_settings = tk.LabelFrame(self.top)
        self.lframe_macro_settings.place(relx=0.259, rely=0.091, relheight=0.145
                , relwidth=0.729)
        self.lframe_macro_settings.configure(relief='groove')
        self.lframe_macro_settings.configure(font="-family {DejaVu Sans} -size 10")
        self.lframe_macro_settings.configure(text='''Macro Settings''')

        self.lb_hotkey_text = tk.Label(self.lframe_macro_settings)
        self.lb_hotkey_text.place(relx=0.766, rely=0.252, height=23, width=101
                , bordermode='ignore')
        self.lb_hotkey_text.configure(activebackground="#d9d9d9")
        self.lb_hotkey_text.configure(activeforeground="#3f3f3f")
        self.lb_hotkey_text.configure(anchor='w')
        self.lb_hotkey_text.configure(compound='left')
        self.lb_hotkey_text.configure(font="-family {DejaVu Sans} -size 10")
        self.lb_hotkey_text.configure(relief="sunken")

        self.entry_rel_delay = tk.Entry(self.lframe_macro_settings)
        self.entry_rel_delay.place(relx=0.837, rely=0.631, height=23
                , relwidth=0.109, bordermode='ignore')
        self.entry_rel_delay.configure(background="white")
        self.entry_rel_delay.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.entry_rel_delay.configure(selectbackground="#d9d9d9")
        self.entry_rel_delay.configure(validate="key")
        validate_number = self.entry_rel_delay.register(PyMouseMacro_support.validate_number)
        self.entry_rel_delay.configure(validatecommand=(validate_number))

        self.btn_post_rel_intv = tk.Button(self.lframe_macro_settings)
        self.btn_post_rel_intv.place(relx=0.684, rely=0.583, height=31, width=111
                , bordermode='ignore')
        self.btn_post_rel_intv.configure(activebackground="#d9d9d9")
        self.btn_post_rel_intv.configure(command=PyMouseMacro_support.btn_cmd_rel_delay)
        self.btn_post_rel_intv.configure(font="-family {DejaVu Sans} -size 10")
        self.btn_post_rel_intv.configure(justify='left')
        self.btn_post_rel_intv.configure(text='''Release Delay:''')

        self.btn_hotkey_add = tk.Button(self.lframe_macro_settings)
        self.btn_hotkey_add.place(relx=0.891, rely=0.252, height=21, width=31
                , bordermode='ignore')
        self.btn_hotkey_add.configure(activebackground="#d9d9d9")
        self.btn_hotkey_add.configure(command=PyMouseMacro_support.btn_cmd_hotkey_add)
        self.btn_hotkey_add.configure(font="-family {DejaVu Sans} -size 14")
        self.btn_hotkey_add.configure(text='''+''')

        self.btn_hotkey_del = tk.Button(self.lframe_macro_settings)
        self.btn_hotkey_del.place(relx=0.928, rely=0.252, height=21, width=31
                , bordermode='ignore')
        self.btn_hotkey_del.configure(activebackground="#d9d9d9")
        self.btn_hotkey_del.configure(command=PyMouseMacro_support.btn_cmd_hotkey_del)
        self.btn_hotkey_del.configure(font="-family {DejaVu Sans} -size 14 -weight bold")
        self.btn_hotkey_del.configure(foreground="#ff0000")
        self.btn_hotkey_del.configure(text='''-''')

        self.btn_offset = tk.Button(self.lframe_macro_settings)
        self.btn_offset.place(relx=0.013, rely=0.194, height=31, width=111
                , bordermode='ignore')
        self.btn_offset.configure(activebackground="#d9d9d9")
        self.btn_offset.configure(command=PyMouseMacro_support.btn_cmd_mouse_offset)
        self.btn_offset.configure(font="-family {DejaVu Sans} -size 10")
        self.btn_offset.configure(text='''Mouse Offset:''')

        self.entry_m_press_intv = tk.Entry(self.lframe_macro_settings)
        self.entry_m_press_intv.place(relx=0.583, rely=0.631, height=23
                , relwidth=0.071, bordermode='ignore')
        self.entry_m_press_intv.configure(background="white")
        self.entry_m_press_intv.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.entry_m_press_intv.configure(selectbackground="#d9d9d9")
        self.entry_m_press_intv.configure(validate="key")
        validate_number = self.entry_m_press_intv.register(PyMouseMacro_support.validate_number)
        self.entry_m_press_intv.configure(validatecommand=(validate_number))

        self.entry_k_press_intv = tk.Entry(self.lframe_macro_settings)
        self.entry_k_press_intv.place(relx=0.583, rely=0.243, height=23
                , relwidth=0.071, bordermode='ignore')
        self.entry_k_press_intv.configure(background="white")
        self.entry_k_press_intv.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.entry_k_press_intv.configure(selectbackground="#d9d9d9")
        self.entry_k_press_intv.configure(validate="key")
        validate_number = self.entry_k_press_intv.register(PyMouseMacro_support.validate_number)
        self.entry_k_press_intv.configure(validatecommand=(validate_number, '%P'))

        self.btn_repeat = tk.Button(self.lframe_macro_settings)
        self.btn_repeat.place(relx=0.165, rely=0.583, height=31, width=71
                , bordermode='ignore')
        self.btn_repeat.configure(activebackground="#d9d9d9")
        self.btn_repeat.configure(command=PyMouseMacro_support.btn_cmd_repeat)
        self.btn_repeat.configure(font="-family {DejaVu Sans} -size 10")
        self.btn_repeat.configure(text='''Repeat''')

        self.label_offset = tk.Label(self.lframe_macro_settings)
        self.label_offset.place(relx=0.025, rely=0.583, height=26, width=92
                , bordermode='ignore')
        self.label_offset.configure(activebackground="#d9d9d9")
        self.label_offset.configure(anchor='w')
        self.label_offset.configure(compound='left')
        self.label_offset.configure(font="-family {DejaVu Sans} -size 10")
        self.label_offset.configure(relief="ridge")
        self.label_offset.configure(text='''0,0''')

        self.entry_repeat = tk.Entry(self.lframe_macro_settings)
        self.entry_repeat.place(relx=0.266, rely=0.631, height=23, relwidth=0.058
                , bordermode='ignore')
        self.entry_repeat.configure(background="white")
        self.entry_repeat.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.entry_repeat.configure(selectbackground="#d9d9d9")
        self.entry_repeat.configure(validate="key")
        validate_number = self.entry_repeat.register(PyMouseMacro_support.validate_number)
        self.entry_repeat.configure(validatecommand=(validate_number))

        self.btn_move_mouse = tk.Button(self.lframe_macro_settings)
        self.btn_move_mouse.place(relx=0.165, rely=0.194, height=31, width=111
                , bordermode='ignore')
        self.btn_move_mouse.configure(activebackground="#d9d9d9")
        self.btn_move_mouse.configure(command=PyMouseMacro_support.btn_cmd_move_mouse)
        self.btn_move_mouse.configure(font="-family {DejaVu Sans} -size 10")
        self.btn_move_mouse.configure(text='''Move Mouse''')

        self.btn_mouse_press_intv = tk.Button(self.lframe_macro_settings)
        self.btn_mouse_press_intv.place(relx=0.368, rely=0.583, height=31
                , width=161, bordermode='ignore')
        self.btn_mouse_press_intv.configure(activebackground="#d9d9d9")
        self.btn_mouse_press_intv.configure(command=PyMouseMacro_support.btn_cmd_mouse_intv)
        self.btn_mouse_press_intv.configure(font="-family {DejaVu Sans} -size 10")
        self.btn_mouse_press_intv.configure(relief="sunken")
        self.btn_mouse_press_intv.configure(text='''Mouse Press Interval:''')

        self.btn_key_press_intv = tk.Button(self.lframe_macro_settings)
        self.btn_key_press_intv.place(relx=0.368, rely=0.194, height=31
                , width=161, bordermode='ignore')
        self.btn_key_press_intv.configure(activebackground="#d9d9d9")
        self.btn_key_press_intv.configure(command=PyMouseMacro_support.btn_cmd_key_intv)
        self.btn_key_press_intv.configure(font="-family {DejaVu Sans} -size 10")
        self.btn_key_press_intv.configure(relief="sunken")
        self.btn_key_press_intv.configure(text='''Key Press Interval:''')

        self.lb_hotkey = tk.Label(self.lframe_macro_settings)
        self.lb_hotkey.place(relx=0.689, rely=0.252, height=28, width=59
                , bordermode='ignore')
        self.lb_hotkey.configure(activebackground="#d9d9d9")
        self.lb_hotkey.configure(anchor='w')
        self.lb_hotkey.configure(compound='left')
        self.lb_hotkey.configure(font="-family {DejaVu Sans} -size 10")
        self.lb_hotkey.configure(text='''Hotkey:''')

        self.frame_macro_list_buttons = tk.Frame(self.top)
        self.frame_macro_list_buttons.place(relx=0.009, rely=0.014
                , relheight=0.069, relwidth=0.239)
        self.frame_macro_list_buttons.configure(relief='groove')
        self.frame_macro_list_buttons.configure(borderwidth="2")
        self.frame_macro_list_buttons.configure(relief="groove")

        self.btn_add_macro = tk.Button(self.frame_macro_list_buttons)
        self.btn_add_macro.place(relx=0.039, rely=0.204, height=31, width=31)
        self.btn_add_macro.configure(activebackground="#d9d9d9")
        self.btn_add_macro.configure(command=PyMouseMacro_support.btn_cmd_macro_add)
        self.btn_add_macro.configure(font="-family {DejaVu Sans} -size 16")
        self.btn_add_macro.configure(text='''+''')

        self.btn_del_macro = tk.Button(self.frame_macro_list_buttons)
        self.btn_del_macro.place(relx=0.197, rely=0.204, height=31, width=31)
        self.btn_del_macro.configure(activebackground="#d9d9d9")
        self.btn_del_macro.configure(command=PyMouseMacro_support.btn_cmd_macro_del)
        self.btn_del_macro.configure(font="-family {DejaVu Sans} -size 16 -weight bold")
        self.btn_del_macro.configure(foreground="#f20f0f")
        self.btn_del_macro.configure(text='''-''')

        self.btn_folder = tk.Button(self.frame_macro_list_buttons)
        self.btn_folder.place(relx=0.347, rely=0.204, height=31, width=31)
        self.btn_folder.configure(activebackground="#d9d9d9")
        self.btn_folder.configure(command=PyMouseMacro_support.btn_cmd_folder)
        self.btn_folder.configure(font="-family {DejaVu Sans} -size 14")
        self.btn_folder.configure(text='''F''')

        self.btn_refresh = tk.Button(self.frame_macro_list_buttons)
        self.btn_refresh.place(relx=0.502, rely=0.204, height=31, width=31)
        self.btn_refresh.configure(activebackground="#d9d9d9")
        self.btn_refresh.configure(command=PyMouseMacro_support.btn_cmd_refresh)
        self.btn_refresh.configure(font="-family {DejaVu Sans} -size 14")
        self.btn_refresh.configure(text='''R''')

        self.btn_rename = tk.Button(self.frame_macro_list_buttons)
        self.btn_rename.place(relx=0.656, rely=0.204, height=31, width=31)
        self.btn_rename.configure(activebackground="#d9d9d9")
        self.btn_rename.configure(command=PyMouseMacro_support.btn_cmd_rename)
        self.btn_rename.configure(font="-family {DejaVu Sans} -size 14")
        self.btn_rename.configure(text='''N''')

        _style_code()
        self.slbox_macro_list = ScrolledListBox(self.top)
        self.slbox_macro_list.place(relx=0.009, rely=0.098, relheight=0.834
                , relwidth=0.237)
        self.slbox_macro_list.configure(activestyle="none")
        self.slbox_macro_list.configure(background="white")
        self.slbox_macro_list.configure(cursor="xterm")
        self.slbox_macro_list.configure(font="TkFixedFont")
        self.slbox_macro_list.configure(highlightbackground="#c2d8d8")
        self.slbox_macro_list.configure(highlightcolor="#070707")
        self.slbox_macro_list.configure(selectbackground="#cbd5d8")
        self.slbox_macro_list.configure(selectmode='single')

        self.lb_status_bar = tk.Label(self.top)
        self.lb_status_bar.place(relx=0.009, rely=0.94, height=35, width=1060)
        self.lb_status_bar.configure(activebackground="#d9d9d9")
        self.lb_status_bar.configure(anchor='w')
        self.lb_status_bar.configure(compound='left')
        self.lb_status_bar.configure(font="-family {DejaVu Sans} -size 10")
        self.lb_status_bar.configure(justify='left')
        self.lb_status_bar.configure(relief="sunken")

        self.LFrameEvents = tk.LabelFrame(self.top)
        self.LFrameEvents.place(relx=0.259, rely=0.246, relheight=0.682
                , relwidth=0.727)
        self.LFrameEvents.configure(relief='groove')
        self.LFrameEvents.configure(font="-family {DejaVu Sans} -size 10")
        self.LFrameEvents.configure(text='''Macro Events''')

        self.swin_events = ScrolledWindow(self.LFrameEvents)
        self.swin_events.place(relx=0.013, rely=0.052, relheight=0.924
                , relwidth=0.981, bordermode='ignore')
        self.swin_events.configure(background="#d3d3d3")
        self.swin_events.configure(borderwidth="2")
        self.swin_events.configure(relief="groove")
        self.swin_events.configure(selectbackground="#d9d9d9")
        self.color = self.swin_events.cget("background")
        self.swin_events_f = tk.Frame(self.swin_events,
                            background=self.color)
        self.swin_events.create_window(0, 0, anchor='nw',
                                           window=self.swin_events_f)

        self.frame_macro_evt_buttons = tk.Frame(self.top)
        self.frame_macro_evt_buttons.place(relx=0.259, rely=0.014
                , relheight=0.069, relwidth=0.728)
        self.frame_macro_evt_buttons.configure(relief='groove')
        self.frame_macro_evt_buttons.configure(borderwidth="2")
        self.frame_macro_evt_buttons.configure(relief="groove")

        self.btn_restore = tk.Button(self.frame_macro_evt_buttons)
        self.btn_restore.place(relx=0.888, rely=0.204, height=31, width=71)
        self.btn_restore.configure(activebackground="#d9d9d9")
        self.btn_restore.configure(command=PyMouseMacro_support.btn_cmd_restore)
        self.btn_restore.configure(font="-family {DejaVu Sans} -size 10")
        self.btn_restore.configure(text='''Restore''')

        self.btn_play = tk.Button(self.frame_macro_evt_buttons)
        self.btn_play.place(relx=0.317, rely=0.204, height=31, width=56)
        self.btn_play.configure(activebackground="#d9d9d9")
        self.btn_play.configure(command=PyMouseMacro_support.btn_cmd_play)
        self.btn_play.configure(font="-family {DejaVu Sans} -size 10")
        self.btn_play.configure(text='''Play''')

        self.btn_save = tk.Button(self.frame_macro_evt_buttons)
        self.btn_save.place(relx=0.114, rely=0.204, height=31, width=71)
        self.btn_save.configure(activebackground="#d9d9d9")
        self.btn_save.configure(command=PyMouseMacro_support.btn_cmd_save)
        self.btn_save.configure(font="-family {DejaVu Sans} -size 10")
        self.btn_save.configure(text='''Save''')

        self.btn_clear = tk.Button(self.frame_macro_evt_buttons)
        self.btn_clear.place(relx=0.787, rely=0.204, height=31, width=71)
        self.btn_clear.configure(activebackground="#d9d9d9")
        self.btn_clear.configure(command=PyMouseMacro_support.btn_cmd_clear)
        self.btn_clear.configure(font="-family {DejaVu Sans} -size 10")
        self.btn_clear.configure(text='''Clear''')

        self.btn_record = tk.Button(self.frame_macro_evt_buttons)
        self.btn_record.place(relx=0.013, rely=0.204, height=31, width=71)
        self.btn_record.configure(activebackground="#d9d9d9")
        self.btn_record.configure(command=PyMouseMacro_support.btn_cmd_record)
        self.btn_record.configure(font="-family {DejaVu Sans} -size 10")
        self.btn_record.configure(text='''Record''')

        self.Label2 = tk.Label(self.frame_macro_evt_buttons)
        self.Label2.place(relx=0.457, rely=0.306, height=21, width=46)
        self.Label2.configure(activebackground="#d9d9d9")
        self.Label2.configure(anchor='w')
        self.Label2.configure(compound='left')
        self.Label2.configure(text='''Delay:''')

        self.entry_delay_edit = tk.Entry(self.frame_macro_evt_buttons)
        self.entry_delay_edit.place(relx=0.52, rely=0.204, height=28
                , relwidth=0.109)
        self.entry_delay_edit.configure(background="white")
        self.entry_delay_edit.configure(font="TkFixedFont")
        self.entry_delay_edit.configure(selectbackground="#d9d9d9")

        self.bt_delay_update = tk.Button(self.frame_macro_evt_buttons)
        self.bt_delay_update.place(relx=0.635, rely=0.204, height=31, width=61)
        self.bt_delay_update.configure(activebackground="#d9d9d9")
        self.bt_delay_update.configure(state='disabled')
        self.bt_delay_update.configure(text='''Add''')

class MacroMerge:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("800x615+482+233")
        top.minsize(800, 615)
        top.maxsize(800, 615)
        top.resizable(1,  1)
        top.title("Macro Merger")

        self.top = top

        self.btn_mm_clear = tk.Button(self.top)
        self.btn_mm_clear.place(relx=0.475, rely=0.358, height=52, width=75)
        self.btn_mm_clear.configure(activebackground="#d9d9d9")
        self.btn_mm_clear.configure(command=PyMouseMacro_support.btn_mm_cmd_clear)
        self.btn_mm_clear.configure(font="-family {DejaVu Sans} -size 24")
        self.btn_mm_clear.configure(text='''<<''')

        self.btn_mm_remove = tk.Button(self.top)
        self.btn_mm_remove.place(relx=0.475, rely=0.252, height=52, width=75)
        self.btn_mm_remove.configure(activebackground="#d9d9d9")
        self.btn_mm_remove.configure(command=PyMouseMacro_support.btn_mm_cmd_remove)
        self.btn_mm_remove.configure(font="-family {DejaVu Sans} -size 24")
        self.btn_mm_remove.configure(text='''<''')

        self.btn_mm_add = tk.Button(self.top)
        self.btn_mm_add.place(relx=0.475, rely=0.154, height=52, width=75)
        self.btn_mm_add.configure(activebackground="#d9d9d9")
        self.btn_mm_add.configure(command=PyMouseMacro_support.btn_mm_cmd_add)
        self.btn_mm_add.configure(font="-family {DejaVu Sans} -size 24")
        self.btn_mm_add.configure(text='''>''')

        _style_code()
        self.slbox_mm_right = ScrolledListBox(self.top)
        self.slbox_mm_right.place(relx=0.6, rely=0.033, relheight=0.883
                , relwidth=0.385)
        self.slbox_mm_right.configure(background="white")
        self.slbox_mm_right.configure(cursor="xterm")
        self.slbox_mm_right.configure(font="TkFixedFont")
        self.slbox_mm_right.configure(highlightcolor="#d9d9d9")
        self.slbox_mm_right.configure(selectbackground="#d9d9d9")

        self.slbox_mm_left = ScrolledListBox(self.top)
        self.slbox_mm_left.place(relx=0.025, rely=0.033, relheight=0.883
                , relwidth=0.41)
        self.slbox_mm_left.configure(background="white")
        self.slbox_mm_left.configure(cursor="xterm")
        self.slbox_mm_left.configure(font="TkFixedFont")
        self.slbox_mm_left.configure(highlightcolor="#d9d9d9")
        self.slbox_mm_left.configure(selectbackground="#d9d9d9")

        self.Label1 = tk.Label(self.top)
        self.Label1.place(relx=0.025, rely=0.927, height=27, width=62)
        self.Label1.configure(activebackground="#d9d9d9")
        self.Label1.configure(anchor='w')
        self.Label1.configure(compound='left')
        self.Label1.configure(font="-family {DejaVu Sans} -size 14")
        self.Label1.configure(text='''Delay:''')

        self.entry_mm_delay = tk.Entry(self.top)
        self.entry_mm_delay.place(relx=0.113, rely=0.927, height=28
                , relwidth=0.108)
        self.entry_mm_delay.configure(background="white")
        self.entry_mm_delay.configure(font="-family {DejaVu Sans Mono} -size 14")
        self.entry_mm_delay.configure(selectbackground="#d9d9d9")
        self.entry_mm_delay.configure(validate="key")
        validate_numeric = self.entry_mm_delay.register(PyMouseMacro_support.validate_numeric)
        self.entry_mm_delay.configure(validatecommand=(validate_numeric))

        self.btn_mm_add_delay = tk.Button(self.top)
        self.btn_mm_add_delay.place(relx=0.238, rely=0.927, height=31, width=51)
        self.btn_mm_add_delay.configure(activebackground="#d9d9d9")
        self.btn_mm_add_delay.configure(command=PyMouseMacro_support.btn_mm_cmd_add_delay)
        self.btn_mm_add_delay.configure(font="-family {DejaVu Sans} -size 18")
        self.btn_mm_add_delay.configure(text='''+''')

        self.btn_mm_cancel = tk.Button(self.top)
        self.btn_mm_cancel.place(relx=0.75, rely=0.927, height=37, width=90)
        self.btn_mm_cancel.configure(activebackground="#d9d9d9")
        self.btn_mm_cancel.configure(command=PyMouseMacro_support.btn_mm_cmd_cancel)
        self.btn_mm_cancel.configure(font="-family {DejaVu Sans} -size 14")
        self.btn_mm_cancel.configure(text='''Cancel''')

        self.btn_mm_ok = tk.Button(self.top)
        self.btn_mm_ok.place(relx=0.875, rely=0.927, height=37, width=55)
        self.btn_mm_ok.configure(activebackground="#d9d9d9")
        self.btn_mm_ok.configure(command=PyMouseMacro_support.btn_mm_cmd_ok)
        self.btn_mm_ok.configure(font="-family {DejaVu Sans} -size 14")
        self.btn_mm_ok.configure(text='''OK''')

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

class ScrolledWindow(AutoScroll, tk.Canvas):
    '''A standard Tkinter Canvas widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Canvas.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    PyMouseMacro_support.main()

if __name__ == '__main__':
    PyMouseMacro_support.main()




