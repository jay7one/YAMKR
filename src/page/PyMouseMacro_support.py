#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Mar 03, 2024 11:15:01 AM GMT  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *

import PyMouseMacro

_debug = True # False to eliminate debug printing from callback functions.

def main(*args):
    '''Main entry point for the application.'''
    global root
    root = tk.Tk()
    root.protocol( 'WM_DELETE_WINDOW' , root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = PyMouseMacro.PyMouseMacros(_top1)
    # Creates a toplevel widget.
    global _top2, _w2
    _top2 = tk.Toplevel(root)
    _w2 = PyMouseMacro.TLDialog(_top2)
    root.mainloop()

def BtCmdClear(*args):
    if _debug:
        print('PyMouseMacro_support.BtCmdClear')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def BtCmdHotkeyAdd(*args):
    if _debug:
        print('PyMouseMacro_support.BtCmdHotkeyAdd')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def BtCmdHotkeyDel(*args):
    if _debug:
        print('PyMouseMacro_support.BtCmdHotkeyDel')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def BtCmdKeyIntv(*args):
    if _debug:
        print('PyMouseMacro_support.BtCmdKeyIntv')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def BtCmdMacroAdd(*args):
    if _debug:
        print('PyMouseMacro_support.BtCmdMacroAdd')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def BtCmdMacroDel(*args):
    if _debug:
        print('PyMouseMacro_support.BtCmdMacroDel')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def BtCmdMouseIntv(*args):
    if _debug:
        print('PyMouseMacro_support.BtCmdMouseIntv')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def BtCmdMouseOffset(*args):
    if _debug:
        print('PyMouseMacro_support.BtCmdMouseOffset')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def BtCmdMoveMouse(*args):
    if _debug:
        print('PyMouseMacro_support.BtCmdMoveMouse')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def BtCmdRecord(*args):
    if _debug:
        print('PyMouseMacro_support.BtCmdRecord')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def BtCmdRelDelay(*args):
    if _debug:
        print('PyMouseMacro_support.BtCmdRelDelay')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def BtCmdRepeat(*args):
    if _debug:
        print('PyMouseMacro_support.BtCmdRepeat')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def BtCmdRestore(*args):
    if _debug:
        print('PyMouseMacro_support.BtCmdRestore')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def BtCmdSave(*args):
    if _debug:
        print('PyMouseMacro_support.BtCmdSave')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def BtnCmdFolder(*args):
    if _debug:
        print('PyMouseMacro_support.BtnCmdFolder')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def BtnCmdRefresh(*args):
    if _debug:
        print('PyMouseMacro_support.BtnCmdRefresh')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def validate_number(*args):
    if _debug:
        print('PyMouseMacro_support.validate_number')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
        return True

if __name__ == '__main__':
    PyMouseMacro.start_up()




